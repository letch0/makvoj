// <auto-generated />
using System;
using Domain.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Domain.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240327182255_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DestinationPhoto", b =>
                {
                    b.Property<int>("DestinationsId")
                        .HasColumnType("int");

                    b.Property<int>("PhotosId")
                        .HasColumnType("int");

                    b.HasKey("DestinationsId", "PhotosId");

                    b.ToTable("DestinationPhoto");
                });

            modelBuilder.Entity("DestinationTag", b =>
                {
                    b.Property<int>("DestinationsId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("DestinationsId", "TagsId");

                    b.ToTable("DestinationTag");
                });

            modelBuilder.Entity("DestinationsPhoto", b =>
                {
                    b.Property<int>("DestinationsId")
                        .HasColumnType("int")
                        .HasColumnName("destinations_id");

                    b.Property<int>("PhotosId")
                        .HasColumnType("int")
                        .HasColumnName("photos_id");

                    b.HasKey("DestinationsId", "PhotosId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PhotosId" }, "photos_id");

                    b.ToTable("destinations_photos", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("country");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("postal_code");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("street");

                    b.Property<string>("Street2")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("street2");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("addresses");
                });

            modelBuilder.Entity("Domain.Entities.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("Address")
                        .HasColumnType("int")
                        .HasColumnName("address");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Address" }, "address");

                    b.ToTable("branches");
                });

            modelBuilder.Entity("Domain.Entities.Destination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("Address")
                        .HasColumnType("int")
                        .HasColumnName("address");

                    b.Property<bool>("Availible")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("availible");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.Property<int?>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Address" }, "address")
                        .HasDatabaseName("address1");

                    b.ToTable("destinations");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Property<int>("PackageSchedules")
                        .HasColumnType("int")
                        .HasColumnName("package_schedules");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.Property<bool>("HasBeenPaid")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("has_been_paid");

                    b.HasKey("PackageSchedules", "UserId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "userId");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("Domain.Entities.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<bool?>("Availible")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("availible")
                        .HasDefaultValueSql("'1'");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<int>("Room")
                        .HasColumnType("int")
                        .HasColumnName("room");

                    b.Property<int?>("RootPackageId")
                        .HasColumnType("int")
                        .HasColumnName("root_package_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CreatedBy" }, "created_by");

                    b.HasIndex(new[] { "Room" }, "room");

                    b.HasIndex(new[] { "RootPackageId" }, "root_package_id");

                    b.ToTable("packages");
                });

            modelBuilder.Entity("Domain.Entities.PackageSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("date")
                        .HasColumnName("date_start");

                    b.Property<short>("Days")
                        .HasColumnType("smallint")
                        .HasColumnName("days");

                    b.Property<int>("PackageId")
                        .HasColumnType("int")
                        .HasColumnName("package_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PackageId" }, "package_id");

                    b.ToTable("package_schedules");
                });

            modelBuilder.Entity("Domain.Entities.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<byte[]>("Photo1")
                        .IsRequired()
                        .HasColumnType("blob")
                        .HasColumnName("photo");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("photos");
                });

            modelBuilder.Entity("Domain.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("AmountAvailible")
                        .HasColumnType("int")
                        .HasColumnName("amount_availible");

                    b.Property<bool?>("Availible")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("availible")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Beds")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("beds");

                    b.Property<decimal>("CostPerNight")
                        .HasPrecision(15)
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("cost_per_night");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Destination")
                        .HasColumnType("int")
                        .HasColumnName("destination");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Destination" }, "destination");

                    b.ToTable("rooms");
                });

            modelBuilder.Entity("Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Decription")
                        .HasColumnType("text")
                        .HasColumnName("decription");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("tags");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("Addresses")
                        .HasColumnType("int")
                        .HasColumnName("addresses");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("surname");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex(new[] { "Addresses" }, "addresses");

                    b.HasIndex(new[] { "Email" }, "users_index_0");

                    b.ToTable("AspNetUsers", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PackageTag", b =>
                {
                    b.Property<int>("PackagesId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("PackagesId", "TagsId");

                    b.ToTable("PackageTag");
                });

            modelBuilder.Entity("PhotoRoom", b =>
                {
                    b.Property<int>("PhotosId")
                        .HasColumnType("int");

                    b.Property<int>("RoomsId")
                        .HasColumnType("int");

                    b.HasKey("PhotosId", "RoomsId");

                    b.ToTable("PhotoRoom");
                });

            modelBuilder.Entity("RoomTag", b =>
                {
                    b.Property<int>("RoomsId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("RoomsId", "TagsId");

                    b.ToTable("RoomTag");
                });

            modelBuilder.Entity("RoomsPhoto", b =>
                {
                    b.Property<int>("RoomsId")
                        .HasColumnType("int")
                        .HasColumnName("rooms_id");

                    b.Property<int>("PhotosId")
                        .HasColumnType("int")
                        .HasColumnName("photos_id");

                    b.HasKey("RoomsId", "PhotosId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PhotosId" }, "photos_id")
                        .HasDatabaseName("photos_id1");

                    b.ToTable("rooms_photos", (string)null);
                });

            modelBuilder.Entity("TagsDestination", b =>
                {
                    b.Property<int>("TagsId")
                        .HasColumnType("int")
                        .HasColumnName("tags_id");

                    b.Property<int>("DestinationsId")
                        .HasColumnType("int")
                        .HasColumnName("destinations_id");

                    b.HasKey("TagsId", "DestinationsId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DestinationsId" }, "destinations_id");

                    b.ToTable("tags_destinations", (string)null);
                });

            modelBuilder.Entity("TagsPackage", b =>
                {
                    b.Property<int>("TagsId")
                        .HasColumnType("int")
                        .HasColumnName("tags_id");

                    b.Property<int>("PackagesId")
                        .HasColumnType("int")
                        .HasColumnName("packages_id");

                    b.HasKey("TagsId", "PackagesId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PackagesId" }, "packages_id");

                    b.ToTable("tags_packages", (string)null);
                });

            modelBuilder.Entity("TagsRoom", b =>
                {
                    b.Property<int>("TagsId")
                        .HasColumnType("int")
                        .HasColumnName("tags_id");

                    b.Property<int>("RoomsId")
                        .HasColumnType("int")
                        .HasColumnName("rooms_id");

                    b.HasKey("TagsId", "RoomsId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "RoomsId" }, "rooms_id");

                    b.ToTable("tags_rooms", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.Property<int?>("Branch")
                        .HasColumnType("int")
                        .HasColumnName("branch");

                    b.HasIndex(new[] { "Branch" }, "branch");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("Domain.Entities.Admin", b =>
                {
                    b.HasBaseType("Domain.Entities.Employee");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("can_delete");

                    b.Property<bool>("CanEdit")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("can_edit");

                    b.ToTable("admin");
                });

            modelBuilder.Entity("DestinationsPhoto", b =>
                {
                    b.HasOne("Domain.Entities.Destination", null)
                        .WithMany()
                        .HasForeignKey("DestinationsId")
                        .IsRequired()
                        .HasConstraintName("destinations_photos_ibfk_1");

                    b.HasOne("Domain.Entities.Photo", null)
                        .WithMany()
                        .HasForeignKey("PhotosId")
                        .IsRequired()
                        .HasConstraintName("destinations_photos_ibfk_2");
                });

            modelBuilder.Entity("Domain.Entities.Branch", b =>
                {
                    b.HasOne("Domain.Entities.Address", "AddressNavigation")
                        .WithMany("Branches")
                        .HasForeignKey("Address")
                        .HasConstraintName("branches_ibfk_1");

                    b.Navigation("AddressNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Destination", b =>
                {
                    b.HasOne("Domain.Entities.Address", "AddressNavigation")
                        .WithMany("Destinations")
                        .HasForeignKey("Address")
                        .IsRequired()
                        .HasConstraintName("destinations_ibfk_1");

                    b.Navigation("AddressNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.HasOne("Domain.Entities.Package", "PackageSchedulesNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("PackageSchedules")
                        .IsRequired()
                        .HasConstraintName("orders_ibfk_1");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("orders_ibfk_2");

                    b.Navigation("PackageSchedulesNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Package", b =>
                {
                    b.HasOne("Domain.Entities.Admin", "CreatedByNavigation")
                        .WithMany("Packages")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("packages_ibfk_2");

                    b.HasOne("Domain.Entities.Room", "RoomNavigation")
                        .WithMany("Packages")
                        .HasForeignKey("Room")
                        .IsRequired()
                        .HasConstraintName("packages_ibfk_1");

                    b.HasOne("Domain.Entities.Package", "RootPackage")
                        .WithMany("InverseRootPackage")
                        .HasForeignKey("RootPackageId")
                        .HasConstraintName("packages_ibfk_3");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("RoomNavigation");

                    b.Navigation("RootPackage");
                });

            modelBuilder.Entity("Domain.Entities.PackageSchedule", b =>
                {
                    b.HasOne("Domain.Entities.Package", "Package")
                        .WithMany("PackageSchedules")
                        .HasForeignKey("PackageId")
                        .IsRequired()
                        .HasConstraintName("package_schedules_ibfk_1");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("Domain.Entities.Photo", b =>
                {
                    b.HasOne("Domain.Entities.Destination", "IdNavigation")
                        .WithOne("Photo")
                        .HasForeignKey("Domain.Entities.Photo", "Id")
                        .IsRequired()
                        .HasConstraintName("photos_ibfk_1");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Room", b =>
                {
                    b.HasOne("Domain.Entities.Destination", "DestinationNavigation")
                        .WithMany("Rooms")
                        .HasForeignKey("Destination")
                        .IsRequired()
                        .HasConstraintName("rooms_ibfk_1");

                    b.Navigation("DestinationNavigation");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.Address", "AddressesNavigation")
                        .WithMany("Users")
                        .HasForeignKey("Addresses")
                        .HasConstraintName("users_ibfk_1");

                    b.Navigation("AddressesNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoomsPhoto", b =>
                {
                    b.HasOne("Domain.Entities.Photo", null)
                        .WithMany()
                        .HasForeignKey("PhotosId")
                        .IsRequired()
                        .HasConstraintName("rooms_photos_ibfk_2");

                    b.HasOne("Domain.Entities.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomsId")
                        .IsRequired()
                        .HasConstraintName("rooms_photos_ibfk_1");
                });

            modelBuilder.Entity("TagsDestination", b =>
                {
                    b.HasOne("Domain.Entities.Destination", null)
                        .WithMany()
                        .HasForeignKey("DestinationsId")
                        .IsRequired()
                        .HasConstraintName("tags_destinations_ibfk_2");

                    b.HasOne("Domain.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .IsRequired()
                        .HasConstraintName("tags_destinations_ibfk_1");
                });

            modelBuilder.Entity("TagsPackage", b =>
                {
                    b.HasOne("Domain.Entities.Package", null)
                        .WithMany()
                        .HasForeignKey("PackagesId")
                        .IsRequired()
                        .HasConstraintName("tags_packages_ibfk_2");

                    b.HasOne("Domain.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .IsRequired()
                        .HasConstraintName("tags_packages_ibfk_1");
                });

            modelBuilder.Entity("TagsRoom", b =>
                {
                    b.HasOne("Domain.Entities.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomsId")
                        .IsRequired()
                        .HasConstraintName("tags_rooms_ibfk_2");

                    b.HasOne("Domain.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .IsRequired()
                        .HasConstraintName("tags_rooms_ibfk_1");
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.HasOne("Domain.Entities.Branch", "BranchNavigation")
                        .WithMany("Employees")
                        .HasForeignKey("Branch")
                        .HasConstraintName("employees_ibfk_2");

                    b.HasOne("Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Employee", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BranchNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Admin", b =>
                {
                    b.HasOne("Domain.Entities.Employee", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Admin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Address", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("Destinations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.Branch", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Domain.Entities.Destination", b =>
                {
                    b.Navigation("Photo");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Domain.Entities.Package", b =>
                {
                    b.Navigation("InverseRootPackage");

                    b.Navigation("Orders");

                    b.Navigation("PackageSchedules");
                });

            modelBuilder.Entity("Domain.Entities.Room", b =>
                {
                    b.Navigation("Packages");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.Entities.Admin", b =>
                {
                    b.Navigation("Packages");
                });
#pragma warning restore 612, 618
        }
    }
}
